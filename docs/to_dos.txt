
9/25/2021:
--> figure out how to add config and ssl files to gitignore
--> finish raw data infra
   --> sp_500_constituents
   --> company data
--> figure out derived data infra
--> need to create logs on when things updated, etc..

--> create master branch which I want to keep on google cloud and keep running
--> create local dev brnach


10/10/2021

-- figure out google Functions
-- maube need to use google app engine -- tbd

10/13/2021
-- setup VM instance
-- get code onto VM instance
-- setup cron job with raw data update scripts


10/14/2021:
-- setup vm instance
-- get permissions setup / understand google service accounts





learn SSH

New approach dont use google cloud source repo --> create vm instance, clone github repo to vm instance
10/16/2021 Steps

Steps for setting up VM Instance and cloning github repo to it
1) Create VM Instance: https://cloud.google.com/compute/docs/instances/create-start-instance#gcloud
2) Allow HTTP and HTTPS traffic on the Firewall
3) Setup VM instance
   3.1) sudo apt-get update  --> update vm instance
   3.2) sudo apt-get install python --> install python
   3.3) sudo apt-get install python3 python-dev python3-dev \
          build-essential libssl-dev libffi-dev \
          libxml2-dev libxslt1-dev zlib1g-dev \
          python-pip
   3.4) sudo apt install git --> install git
   3.5) sudo apt-get install python3-venv --> need to instrall virtual environments
   3.6) sudo apt-get install build-essential libssl-dev libffi-dev \
          python3-dev cargo
        python3 -m pip install poetry --> probably dont need THIS
   3.7) python3 -m pip install --upgrade pip
4) Generate SSH Keys on VM instance https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
  4.1) ssh-keygen -t ed25519 -C "your_email@example.com" --> create keys; you also specify name, file place, password
  4.2) eval "$(ssh-agent -s)" --> ensure the ssh-agent is running
  4.3) ssh-add ~/.ssh/[key name] --> add your SSH private key to the ssh-agent
5) Add public key to github account
   5.1) cat < ~/.ssh/[key name].pub --> copy public key from VM instance
   5.2) add key in github --> https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account
6) git clone git@github.com:jdido08/mister-market.git --> Clone github repo to vm instance
7) pip install -r requirements.txt --> download project requirements



Steps for setting up SSH for accessing VM Instance (server) from local machine
1.) ssh-keygen --> create keys on local machine
2.) eval $(ssh-agent -s) --> enable ssh-agent
3.) ssh-add ~/.ssh/id_rsa --> add keys to ssh-agent on local machine
4.) add public key to ssh-agent on server; GCP lets you do this in the settings of a VM instance
5.) ssh [username]@[ip] e.g. "ssh jdido08@35.243.234.4" --> log into server via local machine


some other links:
1.) https://datasciencecampus.github.io/creating-a-gcp-vm-and-run-cron/
2.)




steps for updating project --> from local environment to vm instance
1.) before editing and code or installing package --> navigate to your local virtual environment
    why: setting up local environment --> you want to create a requirements.txt that is clean, just has the resources you need for the app
    1.a) python virtual environments: https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/26/python-virtual-env/; https://docs.python.org/3/library/venv.html; https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment
    1.b) changing virtual environments in atom: https://youtu.be/qvSpZXT8XhU?t=712
    1.c) env\Scripts\activate --> this is how you actviate virtual environemnt in windows
2.) update project code etc...
3.) pip freeze > requirements.txt ----> update requirements.txt
4.) stage, push updates to github repo
5.) login into vm instance
6.) navigate to project in vm
7.) git pull --> pull latest repo
8.) pip3 install -r requirements.txt --> install latest dependencies onto vm


how to schedule crontab jobs -->
1.) crontab -e --> go to cron tab editor
2.) [* * * * *] [command to run] --> pick time to run (use https://crontab.guru/ to help) and then command to run at that time
    example: 30 19 * * * python3 mister-market/scr/data_infra/update_sp500_prices.py
3.) crontab -l --> to see all cron jobs existing
4.) grep CRON /var/log/syslog --> see all cron job logs
5.) add "> [log file path] 2>&1" to crontab job to record output of cronjob, which can be helpful in debugging --> see https://www.thegeekstuff.com/2012/07/crontab-log/


logging in python:
1.) there are 5 different logging 'levels': debug, info, warning, error, critical


how to get rid of local changes on vm:
1.) git reset --hard


10/21/2021:
-- get os.path working to reference files in mister-market Folder
--


10/30/2021:
-- figure out fundamental data upload
-- decisions: keep free version of alpha vantage -- too much work already done, dont want to go backwards, ill can just run once a week
-- way to limit pulls:
1.) overview data --> only needs to be pulled once
2.) data i need to construct company measures (for now):
 -- stock --> for price
 -- earnings data
 -- balance sheet
 -- adjusted stock for dividneds

 3.) idea -- besides price daily; i can get earnings calendar and only pull data when i need to <-- this is the way to go; this assumes too that earnings and 10Q/K get released the same day

 11/2/2021:
 -- need to make false assumption that earnings and financial reports (income, cash flow, balance sheet all released together --> this is not true; earnings are released first)


-- assume:
--> timeline: earnings, balance sheet, dividneds
--> be smart about which companies to update: only those date > earnings date AND fiscalEnding < past fiscial ending

11/3/2021:
-- learned that alpha vantage has a program that'll remove the 500 day cap (still limits to 5 query per minute) so this works for me!
-- will continue to build this out https://www.alphatournament.com/dashboard/


11/7/2021:
-- need to clean up data ingest a bit to remove data i dont need
-- e.g. dont need to save all data
